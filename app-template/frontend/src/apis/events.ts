/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Management API
 * API for Event Management System
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BadRequestResponse,
  CreateEventRequest,
  EventResponse,
  ListEvents200,
  ListEventsParams,
  UnprocessableEntityResponse
} from '../../../openapi/types';






/**
 * @summary List all events with filtering and pagination
 */
export const listEvents = (
    params?: ListEventsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListEvents200>> => {
    
    
    return axios.get(
      `/api/v1/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getListEventsQueryKey = (params?: ListEventsParams,) => {
    return [`/api/v1/events`, ...(params ? [params]: [])] as const;
    }

    
export const getListEventsQueryOptions = <TData = Awaited<ReturnType<typeof listEvents>>, TError = AxiosError<BadRequestResponse>>(params?: ListEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listEvents>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listEvents>>> = ({ signal }) => listEvents(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type ListEventsQueryResult = NonNullable<Awaited<ReturnType<typeof listEvents>>>
export type ListEventsQueryError = AxiosError<BadRequestResponse>


/**
 * @summary List all events with filtering and pagination
 */

export function useListEvents<TData = Awaited<ReturnType<typeof listEvents>>, TError = AxiosError<BadRequestResponse>>(
 params?: ListEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listEvents>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getListEventsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new event
 */
export const createEvent = (
    createEventRequest: CreateEventRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventResponse>> => {
    
    
    return axios.post(
      `/api/v1/events`,
      createEventRequest,options
    );
  }



export const getCreateEventMutationOptions = <TError = AxiosError<BadRequestResponse | UnprocessableEntityResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventRequest}, TContext> => {

const mutationKey = ['createEvent'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEvent>>, {data: CreateEventRequest}> = (props) => {
          const {data} = props ?? {};

          return  createEvent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>
    export type CreateEventMutationBody = CreateEventRequest
    export type CreateEventMutationError = AxiosError<BadRequestResponse | UnprocessableEntityResponse>

    /**
 * @summary Create a new event
 */
export const useCreateEvent = <TError = AxiosError<BadRequestResponse | UnprocessableEntityResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createEvent>>,
        TError,
        {data: CreateEventRequest},
        TContext
      > => {

      const mutationOptions = getCreateEventMutationOptions(options);

      return useMutation(mutationOptions );
    }
    