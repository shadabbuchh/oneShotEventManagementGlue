/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Management API
 * API for Event Management System
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BadRequestResponse,
  ConflictResponse,
  RegisterUserRequest,
  UnprocessableEntityResponse,
  UserResponse
} from '../../../openapi/types';






/**
 * @summary Register a new user
 */
export const registerUser = (
    registerUserRequest: RegisterUserRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {
    
    
    return axios.post(
      `/api/v1/users/register`,
      registerUserRequest,options
    );
  }



export const getRegisterUserMutationOptions = <TError = AxiosError<BadRequestResponse | ConflictResponse | UnprocessableEntityResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: RegisterUserRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: RegisterUserRequest}, TContext> => {

const mutationKey = ['registerUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerUser>>, {data: RegisterUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterUserMutationResult = NonNullable<Awaited<ReturnType<typeof registerUser>>>
    export type RegisterUserMutationBody = RegisterUserRequest
    export type RegisterUserMutationError = AxiosError<BadRequestResponse | ConflictResponse | UnprocessableEntityResponse>

    /**
 * @summary Register a new user
 */
export const useRegisterUser = <TError = AxiosError<BadRequestResponse | ConflictResponse | UnprocessableEntityResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: RegisterUserRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof registerUser>>,
        TError,
        {data: RegisterUserRequest},
        TContext
      > => {

      const mutationOptions = getRegisterUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    