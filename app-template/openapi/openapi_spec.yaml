openapi: 3.1.0
info:
  title: Event Management API
  version: 1.0.0
  description: API for Event Management System
servers:
  - url: /api/v1
    description: API version 1
paths:
  /users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /events:
    get:
      operationId: listEvents
      summary: List all events with filtering and pagination
      tags:
        - events
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search events by name
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, closed, archived]
          description: Filter by event status
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
          description: Filter events starting after this date
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
          description: Filter events ending before this date
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [date, name, status]
            default: date
          description: Sort field
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: object
                required: [data, pagination]
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventListItem'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          $ref: '#/components/responses/BadRequest'

    post:
      operationId: createEvent
      summary: Create a new event
      tags:
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

components:
  schemas:
    RegisterUserRequest:
      type: object
      required: [email, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100

    UserResponse:
      type: object
      required: [id, email, firstName, lastName, isActive, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventListItem:
      type: object
      required: [id, name, slug, startDate, endDate, status, visibility, registrationStatus, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        venueName:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, published, closed, archived]
        visibility:
          type: string
          enum: [public, private]
        registrationStatus:
          type: string
          enum: [open, closed]
        capacity:
          type: integer
          nullable: true
        registeredCount:
          type: integer
        checkedInCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventResponse:
      type: object
      required: [id, name, slug, startDate, endDate, status, visibility, registrationStatus, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        venueName:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        capacity:
          type: integer
          nullable: true
        status:
          type: string
          enum: [draft, published, closed, archived]
        visibility:
          type: string
          enum: [public, private]
        registrationStatus:
          type: string
          enum: [open, closed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateEventRequest:
      type: object
      required: [name, startDate, endDate]
      properties:
        name:
          type: string
          maxLength: 255
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        venueName:
          type: string
          maxLength: 255
          nullable: true
        address:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
        visibility:
          type: string
          enum: [public, private]
          default: public
        registrationStatus:
          type: string
          enum: [open, closed]
          default: closed
        status:
          type: string
          enum: [draft, published]
          default: draft

    PaginationMeta:
      type: object
      required: [page, limit, totalPages, totalItems]
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer

    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        fieldErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict (concurrent update or duplicate)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnprocessableEntity:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'